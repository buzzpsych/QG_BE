'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _MHObject2 = require('../base/MHObject.js');

var _MHObject3 = _interopRequireDefault(_MHObject2);

var _MHMetadata = require('../meta/MHMetadata.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MHTrait = function (_MHObject) {
  _inherits(MHTrait, _MHObject);

  function MHTrait() {
    _classCallCheck(this, MHTrait);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(MHTrait).apply(this, arguments));
  }

  _createClass(MHTrait, [{
    key: 'fetchContent',
    value: function fetchContent() {
      var view = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
      var size = arguments.length <= 1 || arguments[1] === undefined ? 12 : arguments[1];
      var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      var filters = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
      var sort = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

      var path = this.subendpoint('content');
      var params = {};
      if (filters) {
        params.filters = JSON.stringify(filters);
      }
      if (sort) {
        params.sort = JSON.stringify(sort);
      }
      return this.fetchPagedEndpoint(path, view, size, force, null, params);
    }
  }, {
    key: 'jsonProperties',
    get: function get() {
      return _extends({}, _get(Object.getPrototypeOf(MHTrait.prototype), 'jsonProperties', this), {
        metadata: _MHMetadata.MHTraitMetadata
      });
    }
  }], [{
    key: 'fetchComposition',
    value: function fetchComposition(traits) {
      var types = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      var view = arguments.length <= 2 || arguments[2] === undefined ? 'full' : arguments[2];
      var size = arguments.length <= 3 || arguments[3] === undefined ? 10 : arguments[3];

      var path = this.rootSubendpoint('composition');
      var params = { trait: traits };
      if (types) {
        params.type = types;
      }
      return this.fetchRootBucketedEndpoint(path, view, size, null, params);
    }
  }, {
    key: 'rootEndpoint',
    get: function get() {
      return 'graph/trait';
    }
  }]);

  return MHTrait;
}(_MHObject3.default);

MHTrait.CompositionType = {
  exact: 'exact',
  subset: 'subset',
  superset: 'superset'
};
exports.default = MHTrait;