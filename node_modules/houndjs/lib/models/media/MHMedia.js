'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _MHObject2 = require('../base/MHObject.js');

var _MHObject3 = _interopRequireDefault(_MHObject2);

var _MHRelationalPair = require('../container/MHRelationalPair.js');

var _MHRelationalPair2 = _interopRequireDefault(_MHRelationalPair);

var _MHMetadata = require('../meta/MHMetadata.js');

var _houndRequest = require('../../request/hound-request.js');

var _houndRequest2 = _interopRequireDefault(_houndRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// MediaHound Media Object

var MHMedia = function (_MHObject) {
  _inherits(MHMedia, _MHObject);

  function MHMedia() {
    _classCallCheck(this, MHMedia);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(MHMedia).apply(this, arguments));
  }

  _createClass(MHMedia, [{
    key: 'fetchContent',


    /* TODO: DocJS
    * mhMed.fetchContent()
    *
    * @param force { Boolean } - force refetch of content
    * @return { Promise } - resolves to
    *
    */

    value: function fetchContent() {
      var view = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
      var size = arguments.length <= 1 || arguments[1] === undefined ? 20 : arguments[1];
      var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var path = this.subendpoint('content');
      return this.fetchPagedEndpoint(path, view, size, force);
    }

    /* TODO: DocJS
     * mhMed.fetchSources()
     *
     * @param force { Boolean } - force refetch of content
     * @return { Promise } - resolves to
     *
     */

  }, {
    key: 'fetchSources',
    value: function fetchSources() {
      var view = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
      var size = arguments.length <= 1 || arguments[1] === undefined ? 20 : arguments[1];
      var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var path = this.subendpoint('sources');
      return this.fetchPagedEndpoint(path, view, size, force);
    }

    /**
    * mhObj.fetchContributors(mhid,force)
    *
    * @param { string='full' } view - the view needed to depict each MHObject that is returned
    * @param { number=12     } size  - the number of items to return per page
    * @param { Boolean=false } force
    *
    * @return { houndPagedRequest }  - MediaHound paged request object for this feed
    *
    */

  }, {
    key: 'fetchContributors',
    value: function fetchContributors() {
      var view = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
      var size = arguments.length <= 1 || arguments[1] === undefined ? 12 : arguments[1];
      var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var path = this.subendpoint('contributors');
      return this.fetchPagedEndpoint(path, view, size, force);
    }
  }, {
    key: 'fetchIVATrailer',
    value: function fetchIVATrailer() {
      var path = this.subendpoint('ivaTrailer');

      var cached = this.cachedResponseForPath(path);
      if (cached) {
        return cached;
      }

      var promise = (0, _houndRequest2.default)({
        method: 'GET',
        endpoint: path
      });

      this.setCachedResponse(promise, path);

      return promise;
    }

    /**
    * mhObj.fetchRelated(mhid,force)
    *
    * @param { string='full' } view - the view needed to depict each MHObject that is returned
    * @param { number=0      } page - the zero indexed page number to return
    * @param { number=12     } size  - the number of items to return per page
    * @param { Boolean=false } force
    *
    * @return { houndPagedRequest }  - MediaHound paged request object for this feed
    *
    */

  }, {
    key: 'fetchRelated',
    value: function fetchRelated() {
      var view = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
      var size = arguments.length <= 1 || arguments[1] === undefined ? 12 : arguments[1];
      var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var path = this.subendpoint('related');
      return this.fetchPagedEndpoint(path, view, size, force);
    }
  }, {
    key: 'fetchShortestDistance',


    /**
    * mhObj.fetchShortestDistance(otherMhid)
    *
    * @param { otherMhid } otherMhid - the MHID for the object to calculate shortest path.
    *
    * @return { Number }  - Returns the shortest distance between the two objects.
    *                       If there is no path between the two objects, returns `null`.
    *
    */
    value: function fetchShortestDistance(otherMhid) {
      var path = this.subendpoint('shortestPath/' + otherMhid);
      return (0, _houndRequest2.default)({
        method: 'GET',
        endpoint: path
      }).then(function (response) {
        // This method returns an array of shortest paths.
        // Since we only care about the length, we can look at the first
        // shortest path and calculate its length.
        // The path includes both the start and mhid.
        // We do not count the start as a 'step', so we subtract one.
        return response.paths[0].path.length - 1;
      }).catch(function (err) {
        if (err.xhr.status === 404) {
          // A 404 indicates there is no path between the two nodes.
          return null;
        } else {
          throw err;
        }
      });
    }
  }, {
    key: 'jsonProperties',
    get: function get() {
      return _extends({}, _get(Object.getPrototypeOf(MHMedia.prototype), 'jsonProperties', this), {
        metadata: _MHMetadata.MHMediaMetadata,
        keyContributors: [_MHRelationalPair2.default],
        keyTraits: [_MHRelationalPair2.default],
        keySuitabilities: [_MHRelationalPair2.default],
        primaryGroup: _MHRelationalPair2.default
      });
    }
  }], [{
    key: 'fetchRelatedTo',
    value: function fetchRelatedTo(medias) {
      var filters = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var view = arguments.length <= 2 || arguments[2] === undefined ? 'full' : arguments[2];
      var size = arguments.length <= 3 || arguments[3] === undefined ? 12 : arguments[3];
      var force = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];
      var promote = arguments[5];

      var factors = medias.map(function (m) {
        if (typeof m === 'string' || m instanceof String) {
          return m;
        } else if ('metadata' in m) {
          return m.metadata.mhid;
        } else {
          return m;
        }
      });
      var path = this.rootSubendpoint('related');
      var params = {
        factors: JSON.stringify(factors),
        filters: JSON.stringify(filters)
      };

      if (promote) {
        params.promote = JSON.stringify(promote);
      }

      return this.fetchRootPagedEndpoint(path, params, view, size, force);
    }
  }, {
    key: 'rootEndpoint',
    get: function get() {
      return 'graph/media';
    }
  }]);

  return MHMedia;
}(_MHObject3.default);

exports.default = MHMedia;