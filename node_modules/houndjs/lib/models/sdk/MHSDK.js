'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _MHAccessToken = null;
var _MHUserAccessToken = null;
var _MHClientId = null;
var _MHClientSecret = null;

var _houndOrigin = 'https://api.mediahound.com/';

// Use btoa from a browser or shim it in Node with base64.
var _btoa;
if (typeof window !== 'undefined') {
  _btoa = window.btoa;
} else if (typeof btoa === 'function') {
  _btoa = btoa;
} else if (typeof window === 'undefined') {
  _btoa = require('base-64').encode;
}

var MHSDK = function () {
  function MHSDK() {
    _classCallCheck(this, MHSDK);
  }

  _createClass(MHSDK, null, [{
    key: 'configure',


    /**
     * MHSDK.create(clientId, clientSecret)
     * Configures the MediaHound SDK with an OAuth clientId and clientSecret.
     *
     * @param   clientId <String> - OAuth Client Identifier
     * @param   clientSecret <String> - OAuth Client Secret
     * @param   origin <String> - (Optional) MediaHound network origin.
     * @returns <Promise> - A promise that resolves when the configuration is complete.
     */
    value: function configure(clientId, clientSecret, origin) {
      _MHClientId = clientId;
      _MHClientSecret = clientSecret;
      if (origin) {
        _houndOrigin = origin;
      }

      return this.refreshOAuthToken();
    }
  }, {
    key: 'configureWithAccessToken',
    value: function configureWithAccessToken(accessToken, origin) {
      _MHClientId = null;
      _MHClientSecret = null;
      if (origin) {
        _houndOrigin = origin;
      }

      _MHAccessToken = accessToken;
    }
  }, {
    key: 'authHeaders',
    value: function authHeaders() {
      return _btoa(_MHClientId + ':' + _MHClientSecret);
    }
  }, {
    key: 'refreshOAuthToken',
    value: function refreshOAuthToken() {
      var houndRequest = require('../../request/hound-request.js').default;

      var auth = this.authHeaders();

      return houndRequest({
        method: 'POST',
        useForms: true,
        endpoint: 'security/oauth/token',
        data: {
          client_id: _MHClientId,
          client_secret: _MHClientSecret,
          grant_type: 'client_credentials',
          scope: 'public_profile'
        },
        headers: {
          Authorization: 'Basic ' + auth
        }
      }).then(function (response) {
        _MHAccessToken = response.access_token;
      });
    }
  }, {
    key: '_setUserAccessToken',
    value: function _setUserAccessToken(accessToken) {
      _MHUserAccessToken = accessToken;
    }
  }, {
    key: 'MHAccessToken',
    get: function get() {
      if (_MHUserAccessToken) {
        return _MHUserAccessToken;
      }
      return _MHAccessToken;
    }
  }, {
    key: 'clientId',
    get: function get() {
      return _MHClientId;
    }
  }, {
    key: 'clientSecret',
    get: function get() {
      return _MHClientSecret;
    }
  }, {
    key: 'origin',
    get: function get() {
      return _houndOrigin;
    }
  }, {
    key: 'apiVersion',
    get: function get() {
      return '1.2';
    }
  }]);

  return MHSDK;
}();

exports.default = MHSDK;