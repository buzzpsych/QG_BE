'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _MHObject2 = require('../base/MHObject.js');

var _MHObject3 = _interopRequireDefault(_MHObject2);

var _MHAction = require('../action/MHAction.js');

var _MHAction2 = _interopRequireDefault(_MHAction);

var _MHLoginSession = require('../user/MHLoginSession.js');

var _MHLoginSession2 = _interopRequireDefault(_MHLoginSession);

var _MHMetadata = require('../meta/MHMetadata.js');

var _houndRequest = require('../../request/hound-request.js');

var _houndRequest2 = _interopRequireDefault(_houndRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @classdesc Mediahound Collection Object (MHCollection) inherits from MHObject
 */

var MHCollection = function (_MHObject) {
  _inherits(MHCollection, _MHObject);

  function MHCollection() {
    _classCallCheck(this, MHCollection);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(MHCollection).apply(this, arguments));
  }

  _createClass(MHCollection, [{
    key: 'editMetaData',


    /**
    * @param {string} name - the name of the new collection for the currently logged in user.
    * @returns {Promise<MHCollection>} - a Promise that resolves to the newly created MHCollection
    * @static
    */
    value: function editMetaData(name, description) {
      var path = this.subendpoint('update'),
          data = {};

      if (description) {
        data = {
          'name': name,
          'description': description
        };
      } else if (name) {
        data = { 'name': name };
      }

      return (0, _houndRequest2.default)({
        method: 'PUT',
        endpoint: path,
        data: data
      }).then(function (response) {
        return _MHObject3.default.fetchByMhid(response.metadata.mhid);
      }).then(function (newCollection) {
        if (_MHLoginSession2.default.openSession) {
          _MHLoginSession2.default.currentUser.fetchOwnedCollections('full', 12, true);
        }
        return newCollection;
      });
    }

    /**
     * @param {Array<MHMedia>} - an Array of MHMedia objects to add to this collection
     * @returns {Promise} - a promise that resolves to the new list of content for this MHCollection
     */

  }, {
    key: 'appendContent',
    value: function appendContent(contents) {
      var allowDuplicates = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var mhids = contents.map(function (m) {
        if (typeof m === 'string' || m instanceof String) {
          return m;
        } else if ('metadata' in m) {
          return m.metadata.mhid;
        } else {
          return m;
        }
      });
      return this.changeContents(contents, { operation: 'append', order: 0, ids: mhids }, allowDuplicates);
    }

    /**
     * @param {Array<MHMedia>} - an Array of MHMedia objects to add to this collection
     * @returns {Promise} - a promise that resolves to the new list of content for this MHCollection
     */

  }, {
    key: 'prependContent',
    value: function prependContent(contents) {
      var allowDuplicates = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var mhids = contents.map(function (m) {
        if (typeof m === 'string' || m instanceof String) {
          return m;
        } else if ('metadata' in m) {
          return m.metadata.mhid;
        } else {
          return m;
        }
      });
      return this.changeContents(contents, { operation: 'prepend', order: 0, ids: mhids }, allowDuplicates);
    }

    /**
     * @param {MHMedia} - a MHMedia object to remove from this collection
     * @returns {Promise} - a promise that resolves to the new list of content for this MHCollection
     */

  }, {
    key: 'removeContentAtIndex',
    value: function removeContentAtIndex(index) {
      return this.removeContentAtIndexes([index]);
    }

    /**
     * @param {Array<MHMedia>} - an Array of MHMedia objects to remove from this collection
     * @returns {Promise} - a promise that resolves to the new list of content for this MHCollection
     */

  }, {
    key: 'removeContentAtIndexes',
    value: function removeContentAtIndexes(indexes) {
      return this.changeContents(null, { operation: 'remove', order: 0, indices: indexes });
    }
  }, {
    key: 'removeContentByMhid',
    value: function removeContentByMhid(mhid) {
      var allowDuplicates = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      return this.removeContentByMhids([mhid], allowDuplicates);
    }
  }, {
    key: 'removeContentByMhids',
    value: function removeContentByMhids(mhids) {
      var allowDuplicates = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      return this.changeContents(null, { operation: 'remove', order: 0, ids: mhids }, allowDuplicates);
    }
  }, {
    key: 'removeAllContent',
    value: function removeAllContent() {
      return this.changeContents(null, { operation: 'removeAll', order: 0 });
    }

    /**
     * @private
     * @param {Array<MHMedia>} - an Array of MHMedia objects to add or remove from this collection
     * @param {string} sub - the subendpoint string, 'add' or 'remove'
     * @returns {Promise} - a promise that resolves to the new list of content for this MHCollection
     */

  }, {
    key: 'changeContents',
    value: function changeContents(contents, operation) {
      var allowDuplicates = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

      var path = this.subendpoint('update');
      return (0, _houndRequest2.default)({
        method: 'POST',
        endpoint: path,
        data: {
          operations: [operation],
          allowDuplicates: allowDuplicates
        }
      });
    }

    /**
     * @param {boolean} force - whether to force a call to the server instead of using the cached ownersPromise
     * @returns {Promise} - a promise that resolves to a list of mhids for the owners of this MHCollection
     */

  }, {
    key: 'fetchOwners',
    value: function fetchOwners() {
      var view = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
      var size = arguments.length <= 1 || arguments[1] === undefined ? 12 : arguments[1];
      var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var path = this.subendpoint('owners');
      return this.fetchPagedEndpoint(path, view, size, force);
    }
  }, {
    key: 'fetchContent',
    value: function fetchContent() {
      var view = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
      var size = arguments.length <= 1 || arguments[1] === undefined ? 12 : arguments[1];
      var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      var filters = arguments[3];

      var path = this.subendpoint('content');
      var params = {};
      if (filters) {
        params.filters = filters;
      }
      return this.fetchPagedEndpoint(path, view, size, force, null, params);
    }
  }, {
    key: 'jsonProperties',
    get: function get() {
      return _extends({}, _get(Object.getPrototypeOf(MHCollection.prototype), 'jsonProperties', this), {
        metadata: _MHMetadata.MHCollectionMetadata,
        firstContentImage: { mapper: _MHObject3.default.create },
        primaryOwner: { mapper: _MHObject3.default.create }
      });
    }
  }], [{
    key: 'createWithName',


    /**
     * @param {string} name - the name of the new collection for the currently logged in user.
     * @returns {Promise<MHCollection>} - a Promise that resolves to the newly created MHCollection
     * @static
     */
    value: function createWithName(name, description) {
      var path = this.rootSubendpoint('new');
      var data = {};

      if (name) {
        data.name = name;
      }
      if (description) {
        data.description = description;
      }

      return (0, _houndRequest2.default)({
        method: 'POST',
        endpoint: path,
        data: data
      }).then(function (response) {
        return _MHObject3.default.fetchByMhid(response.metadata.mhid);
      }).then(function (newCollection) {
        if (_MHLoginSession2.default.openSession) {
          _MHLoginSession2.default.currentUser.fetchOwnedCollections('full', 12, true);
        }
        return newCollection;
      });
    }
  }, {
    key: 'mhidPrefix',
    get: function get() {
      return 'mhcol';
    }
  }, {
    key: 'rootEndpoint',
    get: function get() {
      return 'graph/collection';
    }
  }]);

  return MHCollection;
}(_MHObject3.default);

exports.default = MHCollection;


_MHObject3.default.registerConstructor(MHCollection, 'MHCollection');