'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsonParse = require('../internal/jsonParse.js');

var _MHSourceMethod = require('./MHSourceMethod.js');

var _MHSourceMethod2 = _interopRequireDefault(_MHSourceMethod);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// MediaHound SourceMedium Object

var MHSourceMedium = function () {
  function MHSourceMedium(args) {
    _classCallCheck(this, MHSourceMedium);

    (0, _jsonParse.jsonCreateWithArgs)(args, this);
  }

  _createClass(MHSourceMedium, [{
    key: 'methodForType',
    value: function methodForType(type) {
      return this.methods.filter(function (method) {
        return method.type === type;
      })[0];
    }
  }, {
    key: 'jsonProperties',
    get: function get() {
      return {
        type: String,
        methods: [_MHSourceMethod2.default]
      };
    }
  }], [{
    key: 'TYPE_STREAM',
    get: function get() {
      return 'stream';
    }
  }, {
    key: 'TYPE_DOWNLOAD',
    get: function get() {
      return 'download';
    }
  }, {
    key: 'TYPE_DELIVER',
    get: function get() {
      return 'deliver';
    }
  }, {
    key: 'TYPE_PICKUP',
    get: function get() {
      return 'pickup';
    }
  }, {
    key: 'TYPE_ATTEND',
    get: function get() {
      return 'attend';
    }
  }]);

  return MHSourceMedium;
}();

exports.default = MHSourceMedium;