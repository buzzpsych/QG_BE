'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MHObject = require('../base/MHObject.js');

var _MHObject2 = _interopRequireDefault(_MHObject);

var _MHUser = require('./MHUser.js');

var _MHUser2 = _interopRequireDefault(_MHUser);

var _MHSDK = require('../sdk/MHSDK.js');

var _MHSDK2 = _interopRequireDefault(_MHSDK);

var _houndRequest = require('../../request/hound-request.js');

var _houndRequest2 = _interopRequireDefault(_houndRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Singleton Containers
var loggedInUser = null;

var MHLoginSession = function () {
  function MHLoginSession() {
    _classCallCheck(this, MHLoginSession);
  }

  _createClass(MHLoginSession, null, [{
    key: 'loginDialogURLWithRedirectURL',
    value: function loginDialogURLWithRedirectURL(redirectUrl) {
      var scope = arguments.length <= 1 || arguments[1] === undefined ? 'public_profile' : arguments[1];

      return '' + _MHSDK2.default.origin + _MHSDK2.default.apiVersion + '/security/oauth/authorize?client_id=' + _MHSDK2.default.clientId + '&client_secret=' + _MHSDK2.default.clientSecret + '&scope=' + scope + '&response_type=token&redirect_uri=' + redirectUrl;
    }
  }, {
    key: 'loginWithAccessToken',
    value: function loginWithAccessToken(accessToken) {
      return (0, _houndRequest2.default)({
        method: 'POST',
        useForms: true,
        endpoint: 'security/oauth/check_token',
        data: {
          token: accessToken
        },
        withCredentials: true,
        headers: {
          Authorization: 'Basic ' + _MHSDK2.default.authHeaders()
        }
      }).then(function (response) {
        _MHSDK2.default._setUserAccessToken(accessToken);

        // We need to fetch a forced update here because if the user
        // was previously fetched it won't have proper view of the user.
        // Things like `email` are only sent down with the logged-in user context
        return _MHUser2.default.fetchByUsername(response.user_name, 'full', true);
      }).then(function (user) {
        loggedInUser = user;
        return loggedInUser;
      });
    }
  }, {
    key: 'loginWithCredentials',
    value: function loginWithCredentials(username, password) {
      var _this = this;

      var scope = arguments.length <= 2 || arguments[2] === undefined ? 'public_profile' : arguments[2];

      return (0, _houndRequest2.default)({
        method: 'POST',
        useForms: true,
        endpoint: 'security/oauth/token',
        data: {
          username: username,
          password: password,
          scope: scope,
          grant_type: 'password',
          client_id: _MHSDK2.default.clientId,
          client_secret: _MHSDK2.default.clientSecret
        },
        headers: {
          Authorization: 'Basic ' + _MHSDK2.default.authHeaders()
        }
      }).then(function (response) {
        var accessToken = response.access_token;

        if (accessToken) {
          return _this.loginWithAccessToken(accessToken);
        } else {
          throw new Error('MHLoginSessionInvalidCredentialsError');
        }
      });
    }

    /**
     * The Currently logged in MHUser object
     * @property {MHUser}
     * @static
     */

  }, {
    key: 'logout',


    /**
     * MHLoginSession.logout()
     */
    value: function logout() {
      _MHObject.mhidLRU.removeAll();

      loggedInUser = null;
    }
  }, {
    key: 'currentUser',
    get: function get() {
      return loggedInUser;
    }
  }]);

  return MHLoginSession;
}();

exports.default = MHLoginSession;