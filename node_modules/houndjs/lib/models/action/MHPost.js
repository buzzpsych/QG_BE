'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MHObject = require('../base/MHObject.js');

var _MHObject2 = _interopRequireDefault(_MHObject);

var _MHAction2 = require('./MHAction.js');

var _MHAction3 = _interopRequireDefault(_MHAction2);

var _houndRequest = require('../../request/hound-request.js');

var _houndRequest2 = _interopRequireDefault(_houndRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// MediaHound Post Object

var MHPost = function (_MHAction) {
  _inherits(MHPost, _MHAction);

  function MHPost() {
    _classCallCheck(this, MHPost);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(MHPost).apply(this, arguments));
  }

  _createClass(MHPost, null, [{
    key: 'createWithMessage',


    /**
     *
     * MHPost.createWithMessage(message{String}, mentions{Array<MHObject>}, primaryMention{MHObject})
     *
     * @param {string} message - the message for this new post
     */
    value: function createWithMessage(message, mentions, primaryMention) {
      if (!message || !mentions || !primaryMention || typeof message !== 'string' || !Array.isArray(mentions) || !mentions.every(function (x) {
        return x instanceof _MHObject2.default;
      }) || !(primaryMention instanceof _MHObject2.default)) {
        throw new TypeError('Can\'t create post without message string, mentions array, and primary mention object.');
      }

      var path = this.rootSubendpoint('new');
      var mentionedMhids = mentions.map(function (m) {
        return m.metadata.mhid;
      });

      return (0, _houndRequest2.default)({
        method: 'POST',
        endpoint: path,
        data: {
          'message': message,
          'mentions': mentionedMhids,
          'primaryMention': primaryMention.metadata.mhid
        }
      }).then(function (res) {
        // update social counts of mentioned objects
        mentions.forEach(function (m) {
          return m.fetchSocial(true);
        });
        return res;
      });
    }
  }, {
    key: 'mhidPrefix',
    get: function get() {
      return 'mhpst';
    }
  }]);

  return MHPost;
}(_MHAction3.default);

exports.default = MHPost;


_MHObject2.default.registerConstructor(MHPost, 'MHPost');