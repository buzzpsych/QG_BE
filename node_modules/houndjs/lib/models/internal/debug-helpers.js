'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

// Logging Helper
var debug = {
  log: false,
  warn: true, //( (/(local\.mediahound\.com:2014)|(stag-www\.mediahound\.com)/).test(window.location.host) ),
  error: true //( (/(local\.mediahound\.com:2014)|(stag-www\.mediahound\.com)/).test(window.location.host) )
};

var isDevAndDebug = function isDevAndDebug() {

  if (typeof window !== 'undefined') {
    return window.mhDebug && window.location.host === 'local.mediahound.com:2014';
  } else {
    return false;
  }
};

// TODO change so that log takes override and returns console function so that console shows correct line number
var log = exports.log = function log(override) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (typeof override !== 'boolean') {
    args.unshift(override);
    override = false;
  }
  if (console && console.log && (override || debug.log || isDevAndDebug())) {
    console.log.apply(console, arguments);
  }
};

/*
export var log = function(...args) {
  if (typeof args[0] !== 'boolean') {
    return log(false);
  }
  if (console && console.log && ( args[0] || debug.log || isDevAndDebug() )) {
    return console.log.bind(console);
  }
};
 */

var warn = exports.warn = function warn(override) {
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  if (typeof override !== 'boolean') {
    args.unshift(override);
    override = false;
  }
  if (console && console.warn && (override || debug.warn || isDevAndDebug())) {
    console.warn.apply(console, args);
  }
};

var error = exports.error = function error(override) {
  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  if (typeof override !== 'boolean') {
    args.unshift(override);
    override = false;
  }
  if (console && console.error && (override || debug.error || isDevAndDebug())) {
    console.error.apply(console, args);
  }
};