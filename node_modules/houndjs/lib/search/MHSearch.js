'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _houndRequest = require('../request/hound-request.js');

var _houndRequest2 = _interopRequireDefault(_houndRequest);

var _MHPagedResponse = require('../models/container/MHPagedResponse.js');

var _MHPagedResponse2 = _interopRequireDefault(_MHPagedResponse);

var _MHObject = require('../models/base/MHObject.js');

var _MHObject2 = _interopRequireDefault(_MHObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MHSearch = function () {
  function MHSearch() {
    _classCallCheck(this, MHSearch);
  }

  _createClass(MHSearch, null, [{
    key: 'fetchTopResults',
    value: function fetchTopResults(scope) {
      var _this = this;

      var size = arguments.length <= 1 || arguments[1] === undefined ? 12 : arguments[1];
      var next = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var path = 'search/top';

      var promise = void 0;
      if (next) {
        promise = (0, _houndRequest2.default)({
          method: 'GET',
          url: next
        });
      } else {
        var params = {
          pageSize: size
        };

        params.types = [scope];

        promise = (0, _houndRequest2.default)({
          method: 'GET',
          endpoint: path,
          params: params
        });
      }

      return promise.then(function (response) {
        var pagedResponse = new _MHPagedResponse2.default(response);

        pagedResponse.fetchNextOperation = function (newNext) {
          return _this.fetchTopResults(scope, size, newNext);
        };

        return pagedResponse;
      });
    }
  }, {
    key: 'fetchResultsForSearchTerm',
    value: function fetchResultsForSearchTerm(searchTerm, scopes) {
      var _this2 = this;

      var size = arguments.length <= 2 || arguments[2] === undefined ? 12 : arguments[2];
      var next = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

      var path = 'search/all/' + _houndRequest2.default.extraEncode(searchTerm);

      var promise = void 0;
      if (next) {
        promise = (0, _houndRequest2.default)({
          method: 'GET',
          url: next
        });
      } else {
        var params = {
          pageSize: size
        };

        if (Array.isArray(scopes) && scopes.indexOf(MHSearch.SCOPE_ALL) === -1) {
          params.types = scopes;
        }

        promise = (0, _houndRequest2.default)({
          method: 'GET',
          endpoint: path,
          params: params
        });
      }

      return promise.then(function (response) {
        var pagedResponse = new _MHPagedResponse2.default(response);

        pagedResponse.fetchNextOperation = function (newNext) {
          return _this2.fetchResultsForSearchTerm(searchTerm, scopes, size, newNext);
        };

        return pagedResponse;
      });
    }
  }, {
    key: 'fetchSegmentedResultsForSearchTerm',
    value: function fetchSegmentedResultsForSearchTerm(searchTerm, scopes) {
      var siloPageSize = arguments.length <= 2 || arguments[2] === undefined ? 12 : arguments[2];
      var includeAll = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];

      var path = 'search/segmented/' + _houndRequest2.default.extraEncode(searchTerm);

      var params = { siloPageSize: siloPageSize, includeAll: includeAll };

      if (Array.isArray(scopes)) {
        params.types = scopes;
      }

      return _MHObject2.default.fetchRootBucketedEndpoint(path, 'full', 12, null, params);
    }

    // Static Search Scopes enums

  }, {
    key: 'SCOPE_ALL',
    get: function get() {
      return 'all';
    }
  }, {
    key: 'SCOPE_MOVIE',
    get: function get() {
      return 'movie';
    }
  }, {
    key: 'SCOPE_TRACK',
    get: function get() {
      return 'track';
    }
  }, {
    key: 'SCOPE_ALBUM',
    get: function get() {
      return 'album';
    }
  }, {
    key: 'SCOPE_SHOWSERIES',
    get: function get() {
      return 'showSeries';
    }
  }, {
    key: 'SCOPE_SHOWSEASON',
    get: function get() {
      return 'showSeason';
    }
  }, {
    key: 'SCOPE_SHOWEPISODE',
    get: function get() {
      return 'showEpisode';
    }
  }, {
    key: 'SCOPE_BOOK',
    get: function get() {
      return 'book';
    }
  }, {
    key: 'SCOPE_GAME',
    get: function get() {
      return 'game';
    }
  }, {
    key: 'SCOPE_COLLECTION',
    get: function get() {
      return 'collection';
    }
  }, {
    key: 'SCOPE_USER',
    get: function get() {
      return 'user';
    }
  }, {
    key: 'SCOPE_CONTRIBUTOR',
    get: function get() {
      return 'contributor';
    }
  }, {
    key: 'SCOPE_BASE_CONTRIBUTOR',
    get: function get() {
      return 'baseContributor';
    }
  }]);

  return MHSearch;
}();

exports.default = MHSearch;